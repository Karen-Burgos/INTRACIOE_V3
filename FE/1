@csrf_exempt
def firmar_factura_view(request, factura_id):
    print("-Inicio firma DTE: ", factura_id)  
    print("-Inicio firma DTE: ", factura_id)

    factura = get_object_or_404(FacturaElectronica, id=factura_id)
    contingencia = True
    intento = 1
    intentos_max = 3
    tipo_contingencia_obj = None
    contingencia_creada = False
    response = None
    response_data = {}
    fecha_actual = obtener_fecha_actual()
    firma = True
    fallo_total = True
    modal_confirm = False

    # Reintentos desde sesión (inicializar si no existe)
    intentos_modal = request.session.get('intentos_reintento', 0)

    is_reintento = request.method == "POST"

    # Intentos automáticos
    while intento <= intentos_max:
        print(f"Intento {intento} de {intentos_max}")
        token_data = Token_data.objects.filter(activado=True).first()
        if not token_data:
            return JsonResponse({"error": "No hay token activo."}, status=401)

        if not os.path.exists(CERT_PATH):
            return JsonResponse({"error": "Certificado no encontrado."}, status=400)

        try:
            if isinstance(factura.json_original, dict):
                dte_json_str = json.dumps(factura.json_original, separators=(',', ':'))
            else:
                json_obj = json.loads(factura.json_original)
                dte_json_str = json.dumps(json_obj, separators=(',', ':'))
        except Exception as e:
            return JsonResponse({"error": "JSON inválido", "detalle": str(e)}, status=400)

        payload = {
            "nit": "06142811001040",
            "activo": True,
            "passwordPri": "3nCr!pT@d0Pr1v@d@",
            "dteJson": dte_json_str,
        }

        try:
            response = requests.post(FIRMADOR_URL, json=payload, headers={"Content-Type": "application/json"})
            try:
                response_data = response.json()
            except Exception as e:
                response_data = {"error": "No se pudo parsear JSON", "detalle": response.text}
                print("Error al decodificar JSON:", e)

            if response.status_code == 200 and response_data.get("status") == "OK":
                factura.json_firmado = response_data
                factura.firmado = True
                factura.save()
                request.session['intentos_reintento'] = 0  # Resetear intentos
                request.session.modified = True
                contingencia = False
                fallo_total = False
                break
            else:
                print("Error en firma:", response.status_code)
                tipo_contingencia_obj = TipoContingencia.objects.get(
                    codigo="1" if response.status_code in [500, 502, 503, 504, 408] else "5"
                )
                intento += 1
                time.sleep(1)

        except requests.exceptions.RequestException as e:
            tipo_contingencia_obj = TipoContingencia.objects.get(codigo="1")
            intento += 1
            time.sleep(1)
            print("Excepción general:", str(e))
        except requests.exceptions.ConnectionError:
            tipo_contingencia_obj = TipoContingencia.objects.get(codigo="3")
            intento += 1
            time.sleep(1)
        except requests.exceptions.Timeout:
            tipo_contingencia_obj = TipoContingencia.objects.get(codigo="3")
            intento += 1
            time.sleep(1)
        except Exception as e:
            tipo_contingencia_obj = TipoContingencia.objects.get(codigo="5")
            intento += 1
            time.sleep(1)
            print("Error inesperado:", str(e))

    # Si fallaron todos los intentos
    if contingencia:
        if not contingencia_creada:
            finalizar_contigencia_view(request)

            factura.estado = False
            factura.contingencia = True
            factura.tipomodelo = Modelofacturacion.objects.get(codigo="2")
            factura.tipotransmision = TipoTransmision.objects.get(codigo="2")
            factura.fecha_modificacion = fecha_actual.date()
            factura.hora_modificacion = fecha_actual.time()
            factura.save()

            lote_contingencia_dte_view(request, factura_id, tipo_contingencia_obj)
            contingencia_creada = True

        # Incrementar reintentos solo si falló la firma
        print(f"Intentos de reintento (antes de incrementar): {intentos_modal}")
        intentos_modal += 1
        request.session['intentos_reintento'] = intentos_modal
        request.session.modified = True

        # Decidir si mostrar el modal dependiendo de los intentos
        mostrar_modal = intentos_modal < 3
        print(f"Intentos: {intentos_modal}, sesion: {request.session['intentos_reintento']}, Mostrar modal: {mostrar_modal}")

        return redirect(
            f"{reverse('detalle_factura', args=[factura_id])}"
            f"?mostrar_modal={'1' if mostrar_modal else '0'}"
            f"&firma={'1' if firma else '0'}"
            f"&envio_mh=0"
            f"&intentos_modal={intentos_modal}"
        )

    # Firma exitosa
    if response and response.status_code == 200 and response_data.get("status") == "OK":
        json_signed_path = f"FE/json_facturas_firmadas/{factura.codigo_generacion}.json"
        os.makedirs(os.path.dirname(json_signed_path), exist_ok=True)
        with open(json_signed_path, "w", encoding="utf-8") as json_file:
            json.dump(response_data, json_file, indent=4, ensure_ascii=False)

        print("-Fin firma DTE:", factura_id)

        return JsonResponse({
            'success': True,
            'message': 'Factura firmada correctamente.',
            'redirect_url': reverse('detalle_factura', args=[factura_id])
        })
